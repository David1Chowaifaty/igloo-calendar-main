{"file":"ir-channel-header2.js","mappings":";;AAAA,MAAM,kBAAkB,GAAG,8uBAA8uB;;MCO5vB,eAAe;;;;;wBAEgD,EAAE;yBAC3C,CAAC;;EAMlC,gBAAgB;IACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;GAC9B;EAED,oBAAoB;IAClB,IAAI,IAAI,CAAC,gBAAgB,EAAE;MACzB,oBAAoB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KAC7C;GACF;EAED,kBAAkB,CAAC,KAAa;IAC9B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC3B,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;GAChE;EAED,qBAAqB;IACnB,IAAI,IAAI,CAAC,gBAAgB,EAAE;MACzB,oBAAoB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KAC7C;IACD,qBAAqB,CAAC;MACpB,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,+BAA+B,CAAC,CAAC;MAC3E,IAAI,WAAW,EAAE;QACf,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC,qBAAqB,EAAE,CAAC;QAC5D,MAAM,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC;QACxD,MAAM,QAAQ,GAAG,IAAI,GAAG,UAAU,CAAC;QACnC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,KAAK,IAAI,CAAC;QAChD,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,GAAG,cAAc,QAAQ,KAAK,CAAC;OACpE;KACF,CAAC,CAAC;GACJ;EAED,MAAM;IACJ,QACE,EAAC,IAAI,QACH,cACG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,MAClC,UACE,KAAK,EAAE,OAAO,KAAK,CAAC,QAAQ,GAAG,YAAY,GAAG,EAAE,EAAE,EAClD,GAAG,EAAE,KAAK,CAAC,EAAE,EACb,OAAO,EAAE;QACP,IAAI,CAAC,KAAK,CAAC,QAAQ;UAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;OACrD,mBACc,KAAK,CAAC,QAAQ,gBACjB,IAAI,CAAC,aAAa,KAAK,KAAK,GAAG,UAAU,GAAG,EAAE,IAEzD,KAAK,CAAC,IAAI,CACR,CACN,CAAC,CACC,EACL,YAAM,KAAK,EAAC,kBAAkB,EAAC,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC,GAAS,CACzE,EACP;GACH;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/ir-channel/ir-channel-header/ir-channel-header.css?tag=ir-channel-header&encapsulation=scoped","src/components/ir-channel/ir-channel-header/ir-channel-header.tsx"],"sourcesContent":[":host {\n  display: block;\n  position: relative;\n  padding: 0;\n  margin: 0;\n  border-bottom: 1px solid #e4e5ec;\n}\nul {\n  display: flex;\n  align-items: center;\n  gap: 2rem;\n  padding: 0;\n}\n.tab {\n  font-size: 0.95rem;\n  font-weight: 600;\n  cursor: pointer;\n  position: relative;\n  margin: 0;\n  padding: 0;\n  transition: color 0.3s ease;\n  user-select: none;\n}\n.tab[data-disabled] {\n  cursor: auto;\n}\n.tab:hover {\n  opacity: 80%;\n}\n\n.tab[data-state='selected'],\n.tab[data-state='selected']:hover {\n  color: var(--blue);\n  opacity: 100%;\n}\n.active-indicator {\n  padding: 0;\n  bottom: 0px;\n  position: absolute;\n  height: 3px;\n  border-radius: 4px;\n  transition: transform 0.3s ease, width 0.3s ease;\n  background: var(--blue);\n}\n","import { Component, Element, Event, EventEmitter, Host, Prop, State, h } from '@stencil/core';\n\n@Component({\n  tag: 'ir-channel-header',\n  styleUrl: 'ir-channel-header.css',\n  scoped: true,\n})\nexport class IrChannelHeader {\n  @Element() el: HTMLElement;\n  @Prop() headerTitles: { id: string; name: string; disabled: boolean }[] = [];\n  @State() selectedIndex: number = 0;\n  @Event() tabChanged: EventEmitter<string>;\n\n  private activeIndicator: HTMLSpanElement;\n  private animationFrameId: number;\n\n  componentDidLoad() {\n    this.updateActiveIndicator();\n  }\n\n  disconnectedCallback() {\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n    }\n  }\n\n  handleTabSelection(index: number) {\n    this.selectedIndex = index;\n    this.updateActiveIndicator();\n    this.tabChanged.emit(this.headerTitles[this.selectedIndex].id);\n  }\n\n  updateActiveIndicator() {\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n    }\n    requestAnimationFrame(() => {\n      const selectedTab = this.el.querySelector(`li.tab[data-state=\"selected\"]`);\n      if (selectedTab) {\n        const { left, width } = selectedTab.getBoundingClientRect();\n        const parentLeft = this.el.getBoundingClientRect().left;\n        const position = left - parentLeft;\n        this.activeIndicator.style.width = `${width}px`;\n        this.activeIndicator.style.transform = `translateX(${position}px)`;\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Host>\n        <ul>\n          {this.headerTitles.map((title, index) => (\n            <li\n              class={`tab ${title.disabled ? 'text-light' : ''}`}\n              key={title.id}\n              onClick={() => {\n                if (!title.disabled) this.handleTabSelection(index);\n              }}\n              data-disabled={title.disabled}\n              data-state={this.selectedIndex === index ? 'selected' : ''}\n            >\n              {title.name}\n            </li>\n          ))}\n        </ul>\n        <span class=\"active-indicator\" ref={el => (this.activeIndicator = el)}></span>\n      </Host>\n    );\n  }\n}\n"],"version":3}